{"ast":null,"code":"var _jsxFileName = \"/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\n// Игра закончилась\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n// Игра на паузе\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0\n    };\n  }\n  if (endDate === null) {\n    endDate = new Date();\n  }\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */\nexport function Cards({\n  pairsCount = 3,\n  previewSeconds = 5\n}) {\n  _s();\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n  const [intervalId, setIntervalId] = useState(null); // добавляем состояние для intervalId\n  const [timeoutId, setTimeoutId] = useState(null);\n\n  // количество оставшихся попыток\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  });\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsPiphanyAvailable(true);\n    setIsPiphanyHover(false);\n    setIsAlohomoraAvailable(true);\n    setIsAlohomoraHover(false);\n  }\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return {\n        ...card,\n        open: true\n      };\n    });\n    setCards(nextCards);\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      if (sameCards.length < 2) {\n        return true;\n      }\n      return false;\n    });\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\n    if (playerLost) {\n      dispatch(updateAttempts());\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(cardId => cardId.id === card.id ? {\n                    ...cardId,\n                    open: false\n                  } : cardId);\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  //при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore().then(data => {\n        const leaders = data.leaders; // Получаем список лидеров из API\n        console.log(\"Все лидеры:\", leaders);\n        const timeLastLeaders = leaders.reduce((maxTime, leader) => {\n          return Math.max(maxTime, leader.time);\n        }, 0);\n        console.log(\"Время последнего лидера:\", timeLastLeaders);\n        const {\n          minutes,\n          seconds\n        } = timer;\n        const userTime = minutes * 60 + seconds;\n        console.log(\"Таймер пользователя:\", userTime);\n        if (timeLastLeaders > userTime || leaders.length < 10) {\n          setIsLeader(true);\n          console.log(\"Пользователь - лидер!\");\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }, [status, currentLevel]);\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  //устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\n  const attemptsText = wordEndingChanger.changeEnding(attempts, attemptForms);\n\n  //Реализация суперсил\n  const [isPiphanyAvailable, setIsPiphanyAvailable] = useState(true); // Доступно ли использование \"Прозрение\"\n  const [isAlohomoraAvailable, setIsAlohomoraAvailable] = useState(true); // Доступно ли использование \"Алохомора\"\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false);\n  const [isAlohomoraHover, setIsAlohomoraHover] = useState(false);\n  const onPiphanyHover = () => {\n    setIsPiphanyHover(true);\n  };\n  const onPiphanyHoverLeave = () => {\n    setIsPiphanyHover(false);\n  };\n  const onAlohomoraHover = () => {\n    setIsAlohomoraHover(true);\n  };\n  const onAlohomoraHoverLeave = () => {\n    setIsAlohomoraHover(false);\n  };\n\n  //суперсила \"Прозрение\": На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\n  function usePiphany() {\n    const timerValue = {\n      ...timer\n    };\n    clearInterval(intervalId); // используем intervalId из состояния\n\n    setStatus(STATUS_PAUSED);\n    setIsPiphanyAvailable(false);\n    const closedCards = cards.filter(card => !card.open);\n    cards.map(card => card.open = true);\n    setCards(cards.map(card => {\n      if (closedCards.includes(card)) {\n        return {\n          ...card,\n          open: false\n        };\n      } else {\n        return card;\n      }\n    }));\n\n    // сохраняем id таймера для очистки\n    const id = setTimeout(() => {\n      setTimer(timerValue);\n      setStatus(STATUS_IN_PROGRESS);\n    }, 5000);\n\n    // сохраняем id таймера в состоянии\n    setTimeoutId(id);\n  }\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n\n    // Сохраняем id интервала в состоянии\n    setIntervalId(id);\n\n    // Очистка интервала при размонтировании компонента или при изменении gameStartDate или gameEndDate\n    return () => clearInterval(id);\n  }, [gameStartDate, gameEndDate]);\n\n  //суперсила \"Алохомора\": Открывается случайная пара карт.\n  function useAlohomora() {\n    setIsAlohomoraAvailable(false);\n    const closedCards = cards.filter(card => !card.open);\n    const firstRandomIndex = Math.floor(Math.random() * closedCards.length);\n    const firstRandomCard = closedCards[firstRandomIndex];\n    closedCards.splice(firstRandomIndex, 1);\n    const secondRandomIndex = Math.floor(Math.random() * (closedCards.length - 1));\n    const secondRandomCard = closedCards[secondRandomIndex];\n    closedCards.splice(secondRandomIndex, 1);\n    setCards(cards.map(card => {\n      if (card === firstRandomCard || card === secondRandomCard) {\n        return {\n          ...card,\n          open: true\n        };\n      } else {\n        return card;\n      }\n    }));\n\n    //проверка на победу\n    const isPlayerWon = closedCards.every(card => card.open);\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n  }\n  const withoutSuperpowers = isPiphanyAvailable && isAlohomoraAvailable;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerContainer,\n        children: status === STATUS_PREVIEW ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewText,\n            children: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewDescription,\n            children: [\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \", previewSeconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timer,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.minutes.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"sec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.seconds.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), isEasyMode && (status === STATUS_IN_PROGRESS || status === STATUS_PAUSED) ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.attempts,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: attempts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 30\n              }, this), attemptsText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.powersContainer,\n          children: status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PiphanyPower, {\n              isAvailable: isPiphanyAvailable,\n              onClick: usePiphany,\n              onMouseEnter: onPiphanyHover,\n              onMouseLeave: onPiphanyHoverLeave,\n              setIsPiphanyHover: setIsPiphanyHover,\n              isAlohomoraHover: isAlohomoraHover,\n              isAlohomoraAvailable: isAlohomoraAvailable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(AlohomoraPower, {\n              isAvailable: isAlohomoraAvailable,\n              onClick: useAlohomora,\n              onMouseEnter: onAlohomoraHover,\n              onMouseLeave: onAlohomoraHoverLeave,\n              setIsAlohomoraHover: setIsAlohomoraHover,\n              isPiphanyHover: isPiphanyHover,\n              isPiphanyAvailable: isPiphanyAvailable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 19\n            }, this), isPiphanyHover && isPiphanyAvailable || isAlohomoraHover && isAlohomoraAvailable ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [isPiphanyHover && isPiphanyAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: isAlohomoraAvailable ? styles.toolTipPiphany : \"\",\n                children: /*#__PURE__*/_jsxDEV(ToolTips, {\n                  title: \"Прозрение\",\n                  text: \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 25\n              }, this), isAlohomoraHover && isAlohomoraAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: isPiphanyAvailable ? styles.toolTipAlohomora : \"\",\n                children: /*#__PURE__*/_jsxDEV(ToolTips, {\n                  title: \"Алохомора\",\n                  text: \"Открывается случайная пара карт.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : null]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: resetGame,\n          children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => openCard(card),\n        open: status !== STATUS_IN_PROGRESS ? true : card.open,\n        suit: card.suit,\n        rank: card.rank\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), isGameEnded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContainer,\n      children: /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isWon: status === STATUS_WON,\n        gameDurationSeconds: timer.seconds,\n        gameDurationMinutes: timer.minutes,\n        onClick: resetGame,\n        isLeader: isLeader,\n        withoutSuperpowers: withoutSuperpowers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"iH4fRpBrdX/TwYS/MvmrXDrniD8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","updateAttempts","attemptForms","wordEndingChanger","getAllScore","AlohomoraPower","PiphanyPower","ToolTips","jsxDEV","_jsxDEV","Fragment","_Fragment","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","STATUS_PAUSED","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSecconds","Math","floor","getTime","Cards","pairsCount","previewSeconds","_s","dispatch","cards","setCards","status","setStatus","gameStartDate","setGameStartDate","gameEndDate","setGameEndDate","timer","setTimer","intervalId","setIntervalId","timeoutId","setTimeoutId","attempts","store","game","isEasyMode","finishGame","startGame","setIsPiphanyAvailable","setIsPiphanyHover","setIsAlohomoraAvailable","setIsAlohomoraHover","resetGame","openCard","clickedCard","open","nextCards","map","card","id","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","length","playerLost","updatedCards","some","setTimeout","prevCards","updated","cardId","isGameEnded","isLeader","setIsLeader","currentLevel","then","data","leaders","console","log","timeLastLeaders","reduce","maxTime","leader","max","time","userTime","catch","error","alert","timerId","clearTimeout","setInterval","clearInterval","attemptsText","changeEnding","isPiphanyAvailable","isAlohomoraAvailable","isPiphanyHover","isAlohomoraHover","onPiphanyHover","onPiphanyHoverLeave","onAlohomoraHover","onAlohomoraHoverLeave","usePiphany","timerValue","closedCards","includes","useAlohomora","firstRandomIndex","random","firstRandomCard","splice","secondRandomIndex","secondRandomCard","withoutSuperpowers","className","container","children","header","timerContainer","previewText","fileName","_jsxFileName","lineNumber","columnNumber","previewDescription","timerDescription","toString","padStart","buttonContainer","powersContainer","isAvailable","onClick","onMouseEnter","onMouseLeave","toolTipPiphany","title","text","toolTipAlohomora","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes","_c","$RefreshReg$"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\n// Игра закончилась\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n// Игра на паузе\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds,\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0,\n  });\n\n  const [intervalId, setIntervalId] = useState(null); // добавляем состояние для intervalId\n  const [timeoutId, setTimeoutId] = useState(null);\n\n  // количество оставшихся попыток\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  });\n\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsPiphanyAvailable(true);\n    setIsPiphanyHover(false);\n    setIsAlohomoraAvailable(true);\n    setIsAlohomoraHover(false);\n  }\n\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n\n      return {\n        ...card,\n        open: true,\n      };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n\n      if (sameCards.length < 2) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\n    if (playerLost) {\n      dispatch(updateAttempts());\n\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(cardId =>\n                    cardId.id === card.id ? { ...cardId, open: false } : cardId,\n                  );\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  //при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore()\n        .then(data => {\n          const leaders = data.leaders; // Получаем список лидеров из API\n          console.log(\"Все лидеры:\", leaders);\n          const timeLastLeaders = leaders.reduce((maxTime, leader) => {\n            return Math.max(maxTime, leader.time);\n          }, 0);\n          console.log(\"Время последнего лидера:\", timeLastLeaders);\n\n          const { minutes, seconds } = timer;\n          const userTime = minutes * 60 + seconds;\n          console.log(\"Таймер пользователя:\", userTime);\n          if (timeLastLeaders > userTime || leaders.length < 10) {\n            setIsLeader(true);\n            console.log(\"Пользователь - лидер!\");\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }, [status, currentLevel]);\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  //устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\n  const attemptsText = wordEndingChanger.changeEnding(attempts, attemptForms);\n\n  //Реализация суперсил\n  const [isPiphanyAvailable, setIsPiphanyAvailable] = useState(true); // Доступно ли использование \"Прозрение\"\n  const [isAlohomoraAvailable, setIsAlohomoraAvailable] = useState(true); // Доступно ли использование \"Алохомора\"\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false);\n  const [isAlohomoraHover, setIsAlohomoraHover] = useState(false);\n\n  const onPiphanyHover = () => {\n    setIsPiphanyHover(true);\n  };\n\n  const onPiphanyHoverLeave = () => {\n    setIsPiphanyHover(false);\n  };\n\n  const onAlohomoraHover = () => {\n    setIsAlohomoraHover(true);\n  };\n\n  const onAlohomoraHoverLeave = () => {\n    setIsAlohomoraHover(false);\n  };\n\n  //суперсила \"Прозрение\": На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\n  function usePiphany() {\n    const timerValue = { ...timer };\n    clearInterval(intervalId); // используем intervalId из состояния\n\n    setStatus(STATUS_PAUSED);\n    setIsPiphanyAvailable(false);\n\n    const closedCards = cards.filter(card => !card.open);\n    cards.map(card => (card.open = true));\n\n    setCards(\n      cards.map(card => {\n        if (closedCards.includes(card)) {\n          return { ...card, open: false };\n        } else {\n          return card;\n        }\n      }),\n    );\n\n    // сохраняем id таймера для очистки\n    const id = setTimeout(() => {\n      setTimer(timerValue);\n      setStatus(STATUS_IN_PROGRESS);\n    }, 5000);\n\n    // сохраняем id таймера в состоянии\n    setTimeoutId(id);\n  }\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n\n    // Сохраняем id интервала в состоянии\n    setIntervalId(id);\n\n    // Очистка интервала при размонтировании компонента или при изменении gameStartDate или gameEndDate\n    return () => clearInterval(id);\n  }, [gameStartDate, gameEndDate]);\n\n  //суперсила \"Алохомора\": Открывается случайная пара карт.\n  function useAlohomora() {\n    setIsAlohomoraAvailable(false);\n\n    const closedCards = cards.filter(card => !card.open);\n\n    const firstRandomIndex = Math.floor(Math.random() * closedCards.length);\n    const firstRandomCard = closedCards[firstRandomIndex];\n\n    closedCards.splice(firstRandomIndex, 1);\n\n    const secondRandomIndex = Math.floor(Math.random() * (closedCards.length - 1));\n    const secondRandomCard = closedCards[secondRandomIndex];\n\n    closedCards.splice(secondRandomIndex, 1);\n\n    setCards(\n      cards.map(card => {\n        if (card === firstRandomCard || card === secondRandomCard) {\n          return { ...card, open: true };\n        } else {\n          return card;\n        }\n      }),\n    );\n\n    //проверка на победу\n    const isPlayerWon = closedCards.every(card => card.open);\n\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n  }\n\n  const withoutSuperpowers = isPiphanyAvailable && isAlohomoraAvailable;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timerContainer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.timer}>\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>min</div>\n                  <div>{timer.minutes.toString().padStart(2, \"0\")}</div>\n                </div>\n                .\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>sec</div>\n                  <div>{timer.seconds.toString().padStart(2, \"0\")}</div>\n                </div>\n              </div>\n              {isEasyMode && (status === STATUS_IN_PROGRESS || status === STATUS_PAUSED) ? (\n                <div className={styles.attempts}>\n                  <p>\n                    Осталось <span>{attempts}</span>\n                    {attemptsText}\n                  </p>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n          <div className={styles.buttonContainer}>\n            <div className={styles.powersContainer}>\n              {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n                <>\n                  <PiphanyPower\n                    isAvailable={isPiphanyAvailable}\n                    onClick={usePiphany}\n                    onMouseEnter={onPiphanyHover}\n                    onMouseLeave={onPiphanyHoverLeave}\n                    setIsPiphanyHover={setIsPiphanyHover}\n                    isAlohomoraHover={isAlohomoraHover}\n                    isAlohomoraAvailable={isAlohomoraAvailable}\n                  />\n                  <AlohomoraPower\n                    isAvailable={isAlohomoraAvailable}\n                    onClick={useAlohomora}\n                    onMouseEnter={onAlohomoraHover}\n                    onMouseLeave={onAlohomoraHoverLeave}\n                    setIsAlohomoraHover={setIsAlohomoraHover}\n                    isPiphanyHover={isPiphanyHover}\n                    isPiphanyAvailable={isPiphanyAvailable}\n                  />\n                  {(isPiphanyHover && isPiphanyAvailable) || (isAlohomoraHover && isAlohomoraAvailable) ? (\n                    <>\n                      {isPiphanyHover && isPiphanyAvailable && (\n                        <div className={isAlohomoraAvailable ? styles.toolTipPiphany : \"\"}>\n                          <ToolTips\n                            title={\"Прозрение\"}\n                            text={\n                              \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                            }\n                          />\n                        </div>\n                      )}\n                      {isAlohomoraHover && isAlohomoraAvailable && (\n                        <div className={isPiphanyAvailable ? styles.toolTipAlohomora : \"\"}>\n                          <ToolTips title={\"Алохомора\"} text={\"Открывается случайная пара карт.\"} />\n                        </div>\n                      )}\n                    </>\n                  ) : null}\n                </>\n              ) : null}\n            </div>\n            <Button onClick={resetGame}>Начать заново</Button>\n          </div>\n        ) : null}\n      </div>\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n      {isGameEnded ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n            isLeader={isLeader}\n            withoutSuperpowers={withoutSuperpowers}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
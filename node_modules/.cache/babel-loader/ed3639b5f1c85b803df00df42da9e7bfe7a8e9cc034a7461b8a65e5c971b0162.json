{"ast":null,"code":"import _objectSpread from\"/Users/christinnenko/Documents/skyPro-git/react-memo-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/christinnenko/Documents/skyPro-git/react-memo-game/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{shuffle}from\"lodash\";import{useEffect,useState}from\"react\";import{generateDeck}from\"../../utils/cards\";import styles from\"./Cards.module.css\";import{EndGameModal}from\"../../components/EndGameModal/EndGameModal\";import{Button}from\"../../components/Button/Button\";import{Card}from\"../../components/Card/Card\";import{useDispatch,useSelector}from\"react-redux\";import{removeAttempts,updateAttempts}from\"../../store/slices\";import{attemptForms,wordEndingChanger}from\"../../helpers\";import{getAllScore}from\"../../api\";import{AlohomoraPower}from\"../Superpowers/AlohomoraPower\";import{PiphanyPower}from\"../Superpowers/PiphanyPower\";import{ToolTips}from\"../../utils/tooltips/tooltip\";// Игра закончилась\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var STATUS_LOST=\"STATUS_LOST\";var STATUS_WON=\"STATUS_WON\";// Идет игра: карты закрыты, игрок может их открыть\nvar STATUS_IN_PROGRESS=\"STATUS_IN_PROGRESS\";// Начало игры: игрок видит все карты в течении нескольких секунд\nvar STATUS_PREVIEW=\"STATUS_PREVIEW\";// Игра на паузе\nvar STATUS_PAUSED=\"STATUS_PAUSED\";function getTimerValue(startDate,endDate){if(!startDate&&!endDate){return{minutes:0,seconds:0};}if(endDate===null){endDate=new Date();}var diffInSecconds=Math.floor((endDate.getTime()-startDate.getTime())/1000);var minutes=Math.floor(diffInSecconds/60);var seconds=diffInSecconds%60;return{minutes:minutes,seconds:seconds};}/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */export function Cards(_ref){var _ref$pairsCount=_ref.pairsCount,pairsCount=_ref$pairsCount===void 0?3:_ref$pairsCount,_ref$previewSeconds=_ref.previewSeconds,previewSeconds=_ref$previewSeconds===void 0?5:_ref$previewSeconds;var dispatch=useDispatch();// В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];// Текущий статус игры\nvar _useState3=useState(STATUS_PREVIEW),_useState4=_slicedToArray(_useState3,2),status=_useState4[0],setStatus=_useState4[1];// Дата начала игры\nvar _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),gameStartDate=_useState6[0],setGameStartDate=_useState6[1];// Дата конца игры\nvar _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),gameEndDate=_useState8[0],setGameEndDate=_useState8[1];// Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\nvar _useState9=useState({seconds:0,minutes:0}),_useState10=_slicedToArray(_useState9,2),timer=_useState10[0],setTimer=_useState10[1];// количество оставшихся попыток\nvar attempts=useSelector(function(store){return store.game.attempts;});// Статус режима игры до трех ошибок\nvar isEasyMode=useSelector(function(store){return store.game.isEasyMode;});// Если допущено 3 ошибки, игра заканчивается\nuseEffect(function(){if(attempts===0){finishGame(STATUS_LOST);}});function finishGame(){var status=arguments.length>0&&arguments[0]!==undefined?arguments[0]:STATUS_LOST;dispatch(removeAttempts());setGameEndDate(new Date());setStatus(status);}function startGame(){var startDate=new Date();setGameEndDate(null);setGameStartDate(startDate);setTimer(getTimerValue(startDate,null));setStatus(STATUS_IN_PROGRESS);setIsPiphanyAvailable(true);setIsPiphanyHover(false);setIsAlohomoraAvailable(true);setIsAlohomoraHover(false);}function resetGame(){dispatch(removeAttempts());setGameStartDate(null);setGameEndDate(null);setTimer(getTimerValue(null,null));setStatus(STATUS_PREVIEW);}/**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */var openCard=function openCard(clickedCard){// Если карта уже открыта, то ничего не делаем\nif(clickedCard.open){return;}// Игровое поле после открытия кликнутой карты\nvar nextCards=cards.map(function(card){if(card.id!==clickedCard.id){return card;}return _objectSpread(_objectSpread({},card),{},{open:true});});setCards(nextCards);var isPlayerWon=nextCards.every(function(card){return card.open;});// Победа - все карты на поле открыты\nif(isPlayerWon){finishGame(STATUS_WON);return;}// Открытые карты на игровом поле\nvar openCards=nextCards.filter(function(card){return card.open;});// Ищем открытые карты, у которых нет пары среди других открытых\nvar openCardsWithoutPair=openCards.filter(function(card){var sameCards=openCards.filter(function(openCard){return card.suit===openCard.suit&&card.rank===openCard.rank;});if(sameCards.length<2){return true;}return false;});var playerLost=openCardsWithoutPair.length>=2;// Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\nif(playerLost){dispatch(updateAttempts());if(!isEasyMode){finishGame(STATUS_LOST);}else{var updatedCards=nextCards.map(function(card){if(openCardsWithoutPair.some(function(openCard){return openCard.id===card.id;})){if(card.open){setTimeout(function(){setCards(function(prevCards){var updated=prevCards.map(function(cardId){return cardId.id===card.id?_objectSpread(_objectSpread({},cardId),{},{open:false}):cardId;});return updated;});},1000);}}return card;});setCards(updatedCards);}return;}};var isGameEnded=status===STATUS_LOST||status===STATUS_WON;//при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\nvar _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),isLeader=_useState12[0],setIsLeader=_useState12[1];var currentLevel=useSelector(function(store){return store.game.currentLevel;});useEffect(function(){if(status===STATUS_WON&&currentLevel===3){getAllScore().then(function(data){var leaders=data.leaders;// Получаем список лидеров из API\nconsole.log(\"Все лидеры:\",leaders);var timeLastLeaders=leaders.reduce(function(maxTime,leader){return Math.max(maxTime,leader.time);},0);console.log(\"Время последнего лидера:\",timeLastLeaders);var minutes=timer.minutes,seconds=timer.seconds;var userTime=minutes*60+seconds;console.log(\"Таймер пользователя:\",userTime);if(timeLastLeaders>userTime||leaders.length<10){setIsLeader(true);console.log(\"Пользователь - лидер!\");}}).catch(function(error){console.error(error);});}},[status,currentLevel]);// Игровой цикл\nuseEffect(function(){// В статусах кроме превью доп логики не требуется\nif(status!==STATUS_PREVIEW){return;}// В статусе превью мы\nif(pairsCount>36){alert(\"Столько пар сделать невозможно\");return;}setCards(function(){return shuffle(generateDeck(pairsCount,10));});var timerId=setTimeout(function(){startGame();},previewSeconds*1000);return function(){clearTimeout(timerId);};},[status,pairsCount,previewSeconds]);// Добавляем состояние для хранения идентификатора таймера\nvar _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),timeoutId=_useState14[0],setTimeoutId=_useState14[1];// Обновляем значение таймера в интервале\nuseEffect(function(){var intervalId=setInterval(function(){setTimer(getTimerValue(gameStartDate,gameEndDate));},300);// Сохраняем идентификатор таймера в состоянии\nsetTimeoutId(intervalId);return function(){// Очищаем таймер при размонтировании компонента или изменении зависимостей\nclearInterval(intervalId);};},[gameStartDate,gameEndDate]);//устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\nvar attemptsText=wordEndingChanger.changeEnding(attempts,attemptForms);//Реализация суперсил\nvar _useState15=useState(true),_useState16=_slicedToArray(_useState15,2),isPiphanyAvailable=_useState16[0],setIsPiphanyAvailable=_useState16[1];// Доступно ли использование \"Прозрение\"\nvar _useState17=useState(true),_useState18=_slicedToArray(_useState17,2),isAlohomoraAvailable=_useState18[0],setIsAlohomoraAvailable=_useState18[1];// Доступно ли использование \"Алохомора\"\nvar _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),isPiphanyHover=_useState20[0],setIsPiphanyHover=_useState20[1];var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),isAlohomoraHover=_useState22[0],setIsAlohomoraHover=_useState22[1];var onPiphanyHover=function onPiphanyHover(){setIsPiphanyHover(true);};var onPiphanyHoverLeave=function onPiphanyHoverLeave(){setIsPiphanyHover(false);};var onAlohomoraHover=function onAlohomoraHover(){setIsAlohomoraHover(true);};var onAlohomoraHoverLeave=function onAlohomoraHoverLeave(){setIsAlohomoraHover(false);};//суперсила \"Прозрение\": На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\nfunction usePiphany(){// Очищаем предыдущий таймер\nclearTimeout(timeoutId);// Останавливаем таймер\nsetStatus(STATUS_PAUSED);setIsPiphanyAvailable(false);// Сохраняем текущее время\nvar currentTime=new Date().getTime();// Запускаем таймер через 5 секунд\nvar newTimeoutId=setTimeout(function(){// Возобновляем игру и обновляем время начала игры\nsetGameStartDate(function(prevStartDate){// Вычисляем разницу времени между текущим временем и временем остановки таймера\nvar timeDifference=new Date().getTime()-currentTime;// Возвращаем новое время начала игры, с учетом времени остановки таймера\nreturn new Date(prevStartDate.getTime()+timeDifference);});setStatus(STATUS_IN_PROGRESS);},5000);// Обновляем состояние timeoutId\nsetTimeoutId(newTimeoutId);}//суперсила \"Алохомора\": Открывается случайная пара карт.\nfunction useAlohomora(){setIsAlohomoraAvailable(false);var closedCards=cards.filter(function(card){return!card.open;});var firstRandomIndex=Math.floor(Math.random()*closedCards.length);var firstRandomCard=closedCards[firstRandomIndex];closedCards.splice(firstRandomIndex,1);var secondRandomIndex=Math.floor(Math.random()*(closedCards.length-1));var secondRandomCard=closedCards[secondRandomIndex];closedCards.splice(secondRandomIndex,1);setCards(cards.map(function(card){if(card===firstRandomCard||card===secondRandomCard){return _objectSpread(_objectSpread({},card),{},{open:true});}else{return card;}}));//проверка на победу\nvar isPlayerWon=closedCards.every(function(card){return card.open;});if(isPlayerWon){finishGame(STATUS_WON);return;}}var withoutSuperpowers=isPiphanyAvailable&&isAlohomoraAvailable;return/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.header,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.timerContainer,children:status===STATUS_PREVIEW?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{className:styles.previewText,children:\"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"}),/*#__PURE__*/_jsxs(\"p\",{className:styles.previewDescription,children:[\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \",previewSeconds,\" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.timer,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.timerValue,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.timerDescription,children:\"min\"}),/*#__PURE__*/_jsx(\"div\",{children:timer.minutes.toString().padStart(2,\"0\")})]}),\".\",/*#__PURE__*/_jsxs(\"div\",{className:styles.timerValue,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.timerDescription,children:\"sec\"}),/*#__PURE__*/_jsx(\"div\",{children:timer.seconds.toString().padStart(2,\"0\")})]})]}),isEasyMode&&(status===STATUS_IN_PROGRESS||status===STATUS_PAUSED)?/*#__PURE__*/_jsx(\"div\",{className:styles.attempts,children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \",/*#__PURE__*/_jsx(\"span\",{children:attempts}),attemptsText]})}):null]})}),status===STATUS_IN_PROGRESS||status===STATUS_PAUSED?/*#__PURE__*/_jsxs(\"div\",{className:styles.buttonContainer,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.powersContainer,children:status===STATUS_IN_PROGRESS||status===STATUS_PAUSED?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(PiphanyPower,{isAvailable:isPiphanyAvailable,onClick:usePiphany,onMouseEnter:onPiphanyHover,onMouseLeave:onPiphanyHoverLeave,setIsPiphanyHover:setIsPiphanyHover,isAlohomoraHover:isAlohomoraHover,isAlohomoraAvailable:isAlohomoraAvailable}),/*#__PURE__*/_jsx(AlohomoraPower,{isAvailable:isAlohomoraAvailable,onClick:useAlohomora,onMouseEnter:onAlohomoraHover,onMouseLeave:onAlohomoraHoverLeave,setIsAlohomoraHover:setIsAlohomoraHover,isPiphanyHover:isPiphanyHover,isPiphanyAvailable:isPiphanyAvailable}),isPiphanyHover&&isPiphanyAvailable||isAlohomoraHover&&isAlohomoraAvailable?/*#__PURE__*/_jsxs(_Fragment,{children:[isPiphanyHover&&isPiphanyAvailable&&/*#__PURE__*/_jsx(\"div\",{className:styles.toolTipPiphany,children:/*#__PURE__*/_jsx(ToolTips,{title:\"Прозрение\",text:\"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"})}),isAlohomoraHover&&isAlohomoraAvailable&&/*#__PURE__*/_jsx(\"div\",{className:styles.toolTipAlohomora,children:/*#__PURE__*/_jsx(ToolTips,{title:\"Алохомора\",text:\"Открывается случайная пара карт.\"})})]}):null]}):null}),/*#__PURE__*/_jsx(Button,{onClick:resetGame,children:\"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"})]}):null]}),/*#__PURE__*/_jsx(\"div\",{className:styles.cards,children:cards.map(function(card){return/*#__PURE__*/_jsx(Card,{onClick:function onClick(){return openCard(card);},open:status!==STATUS_IN_PROGRESS?true:card.open,suit:card.suit,rank:card.rank},card.id);})}),isGameEnded?/*#__PURE__*/_jsx(\"div\",{className:styles.modalContainer,children:/*#__PURE__*/_jsx(EndGameModal,{isWon:status===STATUS_WON,gameDurationSeconds:timer.seconds,gameDurationMinutes:timer.minutes,onClick:resetGame,isLeader:isLeader,withoutSuperpowers:withoutSuperpowers})}):null]});}","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","updateAttempts","attemptForms","wordEndingChanger","getAllScore","AlohomoraPower","PiphanyPower","ToolTips","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","STATUS_PAUSED","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSecconds","Math","floor","getTime","Cards","_ref","_ref$pairsCount","pairsCount","_ref$previewSeconds","previewSeconds","dispatch","_useState","_useState2","_slicedToArray","cards","setCards","_useState3","_useState4","status","setStatus","_useState5","_useState6","gameStartDate","setGameStartDate","_useState7","_useState8","gameEndDate","setGameEndDate","_useState9","_useState10","timer","setTimer","attempts","store","game","isEasyMode","finishGame","arguments","length","undefined","startGame","setIsPiphanyAvailable","setIsPiphanyHover","setIsAlohomoraAvailable","setIsAlohomoraHover","resetGame","openCard","clickedCard","open","nextCards","map","card","id","_objectSpread","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","playerLost","updatedCards","some","setTimeout","prevCards","updated","cardId","isGameEnded","_useState11","_useState12","isLeader","setIsLeader","currentLevel","then","data","leaders","console","log","timeLastLeaders","reduce","maxTime","leader","max","time","userTime","catch","error","alert","timerId","clearTimeout","_useState13","_useState14","timeoutId","setTimeoutId","intervalId","setInterval","clearInterval","attemptsText","changeEnding","_useState15","_useState16","isPiphanyAvailable","_useState17","_useState18","isAlohomoraAvailable","_useState19","_useState20","isPiphanyHover","_useState21","_useState22","isAlohomoraHover","onPiphanyHover","onPiphanyHoverLeave","onAlohomoraHover","onAlohomoraHoverLeave","usePiphany","currentTime","newTimeoutId","prevStartDate","timeDifference","useAlohomora","closedCards","firstRandomIndex","random","firstRandomCard","splice","secondRandomIndex","secondRandomCard","withoutSuperpowers","className","container","children","header","timerContainer","previewText","previewDescription","timerValue","timerDescription","toString","padStart","buttonContainer","powersContainer","isAvailable","onClick","onMouseEnter","onMouseLeave","toolTipPiphany","title","text","toolTipAlohomora","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\n// Игра закончилась\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n// Игра на паузе\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds,\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0,\n  });\n\n  // количество оставшихся попыток\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  });\n\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsPiphanyAvailable(true);\n    setIsPiphanyHover(false);\n    setIsAlohomoraAvailable(true);\n    setIsAlohomoraHover(false);\n  }\n\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n\n      return {\n        ...card,\n        open: true,\n      };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n\n      if (sameCards.length < 2) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\n    if (playerLost) {\n      dispatch(updateAttempts());\n\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(cardId =>\n                    cardId.id === card.id ? { ...cardId, open: false } : cardId,\n                  );\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  //при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore()\n        .then(data => {\n          const leaders = data.leaders; // Получаем список лидеров из API\n          console.log(\"Все лидеры:\", leaders);\n          const timeLastLeaders = leaders.reduce((maxTime, leader) => {\n            return Math.max(maxTime, leader.time);\n          }, 0);\n          console.log(\"Время последнего лидера:\", timeLastLeaders);\n\n          const { minutes, seconds } = timer;\n          const userTime = minutes * 60 + seconds;\n          console.log(\"Таймер пользователя:\", userTime);\n          if (timeLastLeaders > userTime || leaders.length < 10) {\n            setIsLeader(true);\n            console.log(\"Пользователь - лидер!\");\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }, [status, currentLevel]);\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Добавляем состояние для хранения идентификатора таймера\n  const [timeoutId, setTimeoutId] = useState(null);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n\n    // Сохраняем идентификатор таймера в состоянии\n    setTimeoutId(intervalId);\n\n    return () => {\n      // Очищаем таймер при размонтировании компонента или изменении зависимостей\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  //устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\n  const attemptsText = wordEndingChanger.changeEnding(attempts, attemptForms);\n\n  //Реализация суперсил\n  const [isPiphanyAvailable, setIsPiphanyAvailable] = useState(true); // Доступно ли использование \"Прозрение\"\n  const [isAlohomoraAvailable, setIsAlohomoraAvailable] = useState(true); // Доступно ли использование \"Алохомора\"\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false);\n  const [isAlohomoraHover, setIsAlohomoraHover] = useState(false);\n\n  const onPiphanyHover = () => {\n    setIsPiphanyHover(true);\n  };\n\n  const onPiphanyHoverLeave = () => {\n    setIsPiphanyHover(false);\n  };\n\n  const onAlohomoraHover = () => {\n    setIsAlohomoraHover(true);\n  };\n\n  const onAlohomoraHoverLeave = () => {\n    setIsAlohomoraHover(false);\n  };\n\n  //суперсила \"Прозрение\": На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\n  function usePiphany() {\n    // Очищаем предыдущий таймер\n    clearTimeout(timeoutId);\n\n    // Останавливаем таймер\n    setStatus(STATUS_PAUSED);\n    setIsPiphanyAvailable(false);\n\n    // Сохраняем текущее время\n    const currentTime = new Date().getTime();\n\n    // Запускаем таймер через 5 секунд\n    const newTimeoutId = setTimeout(() => {\n      // Возобновляем игру и обновляем время начала игры\n      setGameStartDate(prevStartDate => {\n        // Вычисляем разницу времени между текущим временем и временем остановки таймера\n        const timeDifference = new Date().getTime() - currentTime;\n        // Возвращаем новое время начала игры, с учетом времени остановки таймера\n        return new Date(prevStartDate.getTime() + timeDifference);\n      });\n      setStatus(STATUS_IN_PROGRESS);\n    }, 5000);\n\n    // Обновляем состояние timeoutId\n    setTimeoutId(newTimeoutId);\n  }\n\n  //суперсила \"Алохомора\": Открывается случайная пара карт.\n  function useAlohomora() {\n    setIsAlohomoraAvailable(false);\n\n    const closedCards = cards.filter(card => !card.open);\n\n    const firstRandomIndex = Math.floor(Math.random() * closedCards.length);\n    const firstRandomCard = closedCards[firstRandomIndex];\n\n    closedCards.splice(firstRandomIndex, 1);\n\n    const secondRandomIndex = Math.floor(Math.random() * (closedCards.length - 1));\n    const secondRandomCard = closedCards[secondRandomIndex];\n\n    closedCards.splice(secondRandomIndex, 1);\n\n    setCards(\n      cards.map(card => {\n        if (card === firstRandomCard || card === secondRandomCard) {\n          return { ...card, open: true };\n        } else {\n          return card;\n        }\n      }),\n    );\n\n    //проверка на победу\n    const isPlayerWon = closedCards.every(card => card.open);\n\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n  }\n\n  const withoutSuperpowers = isPiphanyAvailable && isAlohomoraAvailable;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timerContainer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.timer}>\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>min</div>\n                  <div>{timer.minutes.toString().padStart(2, \"0\")}</div>\n                </div>\n                .\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>sec</div>\n                  <div>{timer.seconds.toString().padStart(2, \"0\")}</div>\n                </div>\n              </div>\n              {isEasyMode && (status === STATUS_IN_PROGRESS || status === STATUS_PAUSED) ? (\n                <div className={styles.attempts}>\n                  <p>\n                    Осталось <span>{attempts}</span>\n                    {attemptsText}\n                  </p>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n          <div className={styles.buttonContainer}>\n            <div className={styles.powersContainer}>\n              {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n                <>\n                  <PiphanyPower\n                    isAvailable={isPiphanyAvailable}\n                    onClick={usePiphany}\n                    onMouseEnter={onPiphanyHover}\n                    onMouseLeave={onPiphanyHoverLeave}\n                    setIsPiphanyHover={setIsPiphanyHover}\n                    isAlohomoraHover={isAlohomoraHover}\n                    isAlohomoraAvailable={isAlohomoraAvailable}\n                  />\n                  <AlohomoraPower\n                    isAvailable={isAlohomoraAvailable}\n                    onClick={useAlohomora}\n                    onMouseEnter={onAlohomoraHover}\n                    onMouseLeave={onAlohomoraHoverLeave}\n                    setIsAlohomoraHover={setIsAlohomoraHover}\n                    isPiphanyHover={isPiphanyHover}\n                    isPiphanyAvailable={isPiphanyAvailable}\n                  />\n                  {(isPiphanyHover && isPiphanyAvailable) || (isAlohomoraHover && isAlohomoraAvailable) ? (\n                    <>\n                      {isPiphanyHover && isPiphanyAvailable && (\n                        <div className={styles.toolTipPiphany}>\n                          <ToolTips\n                            title={\"Прозрение\"}\n                            text={\n                              \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                            }\n                          />\n                        </div>\n                      )}\n                      {isAlohomoraHover && isAlohomoraAvailable && (\n                        <div className={styles.toolTipAlohomora}>\n                          <ToolTips title={\"Алохомора\"} text={\"Открывается случайная пара карт.\"} />\n                        </div>\n                      )}\n                    </>\n                  ) : null}\n                </>\n              ) : null}\n            </div>\n            <Button onClick={resetGame}>Начать заново</Button>\n          </div>\n        ) : null}\n      </div>\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n      {isGameEnded ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n            isLeader={isLeader}\n            withoutSuperpowers={withoutSuperpowers}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\n// Игра закончилась\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n// Игра на паузе\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0\n    };\n  }\n  if (endDate === null) {\n    endDate = new Date();\n  }\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */\nexport function Cards({\n  pairsCount = 3,\n  previewSeconds = 5\n}) {\n  _s();\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n\n  // количество оставшихся попыток\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  });\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsEpiphanyAvailable(true);\n    setIsPiphanyHover(false);\n    setIsAlohomoraAvailable(true);\n    setIsAlohomoraHover(false);\n  }\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return {\n        ...card,\n        open: true\n      };\n    });\n    setCards(nextCards);\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      if (sameCards.length < 2) {\n        return true;\n      }\n      return false;\n    });\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\n    if (playerLost) {\n      dispatch(updateAttempts());\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(cardId => cardId.id === card.id ? {\n                    ...cardId,\n                    open: false\n                  } : cardId);\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  //при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore().then(data => {\n        const leaders = data.leaders; // Получаем список лидеров из API\n        console.log(\"Все лидеры:\", leaders);\n        const timeLastLeaders = leaders.reduce((maxTime, leader) => {\n          return Math.max(maxTime, leader.time);\n        }, 0);\n        console.log(\"Время последнего лидера:\", timeLastLeaders);\n        const {\n          minutes,\n          seconds\n        } = timer;\n        const userTime = minutes * 60 + seconds;\n        console.log(\"Таймер пользователя:\", userTime);\n        if (timeLastLeaders > userTime || leaders.length < 10) {\n          setIsLeader(true);\n          console.log(\"Пользователь - лидер!\");\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }, [status, currentLevel]);\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  //устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\n  const attemptsText = wordEndingChanger.changeEnding(attempts, attemptForms);\n\n  //Реализация суперсил\n  const [isEpiphanyAvailable, setIsEpiphanyAvailable] = useState(true); // Доступно ли использование \"Прозрение\"\n  const [isAlohomoraAvailable, setIsAlohomoraAvailable] = useState(true); // Доступно ли использование \"Алохомора\"\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false);\n  const [isAlohomoraHover, setIsAlohomoraHover] = useState(false);\n  const onEpiphanyHover = () => {\n    setIsPiphanyHover(true);\n  };\n  const onEpiphanyHoverLeave = () => {\n    setIsPiphanyHover(false);\n  };\n  const onAlohomoraHover = () => {\n    setIsAlohomoraHover(true);\n  };\n  const onAlohomoraMouseLeave = () => {\n    setIsAlohomoraHover(false);\n  };\n\n  // function openTooltipEpiphany() {\n  //   const currentTime = timer;\n  //   setStatus(STATUS_PAUSED);\n  //   setIsEpiphanyAvailable(false);\n  //   const closedCards = cards.filter(card => !card.open);\n\n  //   cards.map(card => (card.open = true));\n\n  //   setTimeout(() => {\n  //     setCards(\n  //       cards.map(card => {\n  //         if (closedCards.includes(card)) {\n  //           return { ...card, open: false };\n  //         } else {\n  //           return card;\n  //         }\n  //       }),\n  //     );\n  //     setTimer(currentTime);\n  //     setStatus(STATUS_IN_PROGRESS);\n  //   }, 5000);\n  // }\n\n  // function openTooltipAlohomora() {\n  //   setIsAlohomoraAvailable(false);\n  //   const closedCards = cards.filter(card => !card.open);\n  //   const firstRandomCard = closedCards[Math.round(Math.random() * (closedCards.length - 1) + 1)];\n  //   const secondRandomCard = closedCards.filter(\n  //     closedCard =>\n  //       closedCard.suit === firstRandomCard.suit &&\n  //       closedCard.rank === firstRandomCard.rank &&\n  //       firstRandomCard.id !== closedCard.id,\n  //   );\n  //   setCards(\n  //     cards.map(card => {\n  //       if (card === firstRandomCard || card === secondRandomCard[0]) {\n  //         return { ...card, open: true };\n  //       } else {\n  //         return card;\n  //       }\n  //     }),\n  //   );\n  // }\n\n  const withoutSuperpowers = isEpiphanyAvailable && isAlohomoraAvailable;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerContainer,\n        children: status === STATUS_PREVIEW ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewText,\n            children: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewDescription,\n            children: [\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \", previewSeconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timer,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.minutes.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"sec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.seconds.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), isEasyMode && status === STATUS_IN_PROGRESS ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.attempts,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: attempts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 30\n              }, this), attemptsText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), status === STATUS_IN_PROGRESS ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.powersContainer,\n          children: [status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.superPowersContainer,\n            children: [/*#__PURE__*/_jsxDEV(PiphanyPower, {\n              isAvailable: isEpiphanyAvailable\n              // onClick={openTooltipEpiphany}\n              ,\n              onMouseEnter: onEpiphanyHover,\n              onMouseLeave: onEpiphanyMouseLeave,\n              setIsPiphanyHover: setIsPiphanyHover,\n              isAlohomoraHover: isAlohomoraHover,\n              isAlohomoraAvailable: isAlohomoraAvailable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(AlohomoraPower, {\n              isAvailable: isAlohomoraAvailable\n              // onClick={openTooltipAlohomora}\n              ,\n              onMouseEnter: onAlohomoraHover,\n              onMouseLeave: onAlohomoraMouseLeave,\n              setIsAlohomoraHover: setIsAlohomoraHover,\n              isPiphanyHover: isPiphanyHover,\n              isEpiphanyAvailable: isEpiphanyAvailable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this) : null, isPiphanyHover && isEpiphanyAvailable || isAlohomoraHover && isAlohomoraAvailable ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.modalBackground,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.modalWindow,\n              children: [isPiphanyHover && isEpiphanyAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: isAlohomoraAvailable ? styles.toolTipEpiphany : styles.toolTip,\n                children: /*#__PURE__*/_jsxDEV(ToolTips, {\n                  title: \"Прозрение\",\n                  text: \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 23\n              }, this), isAlohomoraHover && isAlohomoraAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: isEpiphanyAvailable ? styles.toolTipAlohomora : styles.toolTip,\n                children: /*#__PURE__*/_jsxDEV(ToolTips, {\n                  title: \"Алохомора\",\n                  text: \"Открывается случайная пара карт.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: resetGame,\n          children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => openCard(card),\n        open: status !== STATUS_IN_PROGRESS ? true : card.open,\n        suit: card.suit,\n        rank: card.rank\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), isGameEnded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContainer,\n      children: /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isWon: status === STATUS_WON,\n        gameDurationSeconds: timer.seconds,\n        gameDurationMinutes: timer.minutes,\n        onClick: resetGame,\n        isLeader: isLeader,\n        withoutSuperpowers: withoutSuperpowers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"EVjNIfp7zQKoVD8+PPL30h+Z0Fc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","updateAttempts","attemptForms","wordEndingChanger","getAllScore","AlohomoraPower","PiphanyPower","ToolTips","jsxDEV","_jsxDEV","Fragment","_Fragment","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","STATUS_PAUSED","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSecconds","Math","floor","getTime","Cards","pairsCount","previewSeconds","_s","dispatch","cards","setCards","status","setStatus","gameStartDate","setGameStartDate","gameEndDate","setGameEndDate","timer","setTimer","attempts","store","game","isEasyMode","finishGame","startGame","setIsEpiphanyAvailable","setIsPiphanyHover","setIsAlohomoraAvailable","setIsAlohomoraHover","resetGame","openCard","clickedCard","open","nextCards","map","card","id","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","length","playerLost","updatedCards","some","setTimeout","prevCards","updated","cardId","isGameEnded","isLeader","setIsLeader","currentLevel","then","data","leaders","console","log","timeLastLeaders","reduce","maxTime","leader","max","time","userTime","catch","error","alert","timerId","clearTimeout","intervalId","setInterval","clearInterval","attemptsText","changeEnding","isEpiphanyAvailable","isAlohomoraAvailable","isPiphanyHover","isAlohomoraHover","onEpiphanyHover","onEpiphanyHoverLeave","onAlohomoraHover","onAlohomoraMouseLeave","withoutSuperpowers","className","container","children","header","timerContainer","previewText","fileName","_jsxFileName","lineNumber","columnNumber","previewDescription","timerValue","timerDescription","toString","padStart","powersContainer","superPowersContainer","isAvailable","onMouseEnter","onMouseLeave","onEpiphanyMouseLeave","modalBackground","modalWindow","toolTipEpiphany","toolTip","title","text","toolTipAlohomora","onClick","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes","_c","$RefreshReg$"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\n// Игра закончилась\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n// Игра на паузе\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds,\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Обычный режим: 1 ошибка = поражение\n * Облегченный режим: 3 ошибки = поражение\n */\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0,\n  });\n\n  // количество оставшихся попыток\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  });\n\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsEpiphanyAvailable(true);\n    setIsPiphanyHover(false);\n    setIsAlohomoraAvailable(true);\n    setIsAlohomoraHover(false);\n  }\n\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n\n      return {\n        ...card,\n        open: true,\n      };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n\n      if (sameCards.length < 2) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // Если на поле 2 открытые карты без пары - Обычный режим: \"Игрок проиграл\". Облегченный режим: \"Игра продолжается\"\n    if (playerLost) {\n      dispatch(updateAttempts());\n\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(cardId =>\n                    cardId.id === card.id ? { ...cardId, open: false } : cardId,\n                  );\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  //при победе на уровне игры 3 и если результат по времени лучше чем у последнего игрока в лидерборде, устанавливаем isLeader в true для внесение игрока в лидерборд\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore()\n        .then(data => {\n          const leaders = data.leaders; // Получаем список лидеров из API\n          console.log(\"Все лидеры:\", leaders);\n          const timeLastLeaders = leaders.reduce((maxTime, leader) => {\n            return Math.max(maxTime, leader.time);\n          }, 0);\n          console.log(\"Время последнего лидера:\", timeLastLeaders);\n\n          const { minutes, seconds } = timer;\n          const userTime = minutes * 60 + seconds;\n          console.log(\"Таймер пользователя:\", userTime);\n          if (timeLastLeaders > userTime || leaders.length < 10) {\n            setIsLeader(true);\n            console.log(\"Пользователь - лидер!\");\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }, [status, currentLevel]);\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  //устанавливаем корректное окончание слова \"попытка\" в зависимости от оставшегося числа попыток\n  const attemptsText = wordEndingChanger.changeEnding(attempts, attemptForms);\n\n  //Реализация суперсил\n  const [isEpiphanyAvailable, setIsEpiphanyAvailable] = useState(true); // Доступно ли использование \"Прозрение\"\n  const [isAlohomoraAvailable, setIsAlohomoraAvailable] = useState(true); // Доступно ли использование \"Алохомора\"\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false);\n  const [isAlohomoraHover, setIsAlohomoraHover] = useState(false);\n\n  const onEpiphanyHover = () => {\n    setIsPiphanyHover(true);\n  };\n\n  const onEpiphanyHoverLeave = () => {\n    setIsPiphanyHover(false);\n  };\n\n  const onAlohomoraHover = () => {\n    setIsAlohomoraHover(true);\n  };\n\n  const onAlohomoraMouseLeave = () => {\n    setIsAlohomoraHover(false);\n  };\n\n  // function openTooltipEpiphany() {\n  //   const currentTime = timer;\n  //   setStatus(STATUS_PAUSED);\n  //   setIsEpiphanyAvailable(false);\n  //   const closedCards = cards.filter(card => !card.open);\n\n  //   cards.map(card => (card.open = true));\n\n  //   setTimeout(() => {\n  //     setCards(\n  //       cards.map(card => {\n  //         if (closedCards.includes(card)) {\n  //           return { ...card, open: false };\n  //         } else {\n  //           return card;\n  //         }\n  //       }),\n  //     );\n  //     setTimer(currentTime);\n  //     setStatus(STATUS_IN_PROGRESS);\n  //   }, 5000);\n  // }\n\n  // function openTooltipAlohomora() {\n  //   setIsAlohomoraAvailable(false);\n  //   const closedCards = cards.filter(card => !card.open);\n  //   const firstRandomCard = closedCards[Math.round(Math.random() * (closedCards.length - 1) + 1)];\n  //   const secondRandomCard = closedCards.filter(\n  //     closedCard =>\n  //       closedCard.suit === firstRandomCard.suit &&\n  //       closedCard.rank === firstRandomCard.rank &&\n  //       firstRandomCard.id !== closedCard.id,\n  //   );\n  //   setCards(\n  //     cards.map(card => {\n  //       if (card === firstRandomCard || card === secondRandomCard[0]) {\n  //         return { ...card, open: true };\n  //       } else {\n  //         return card;\n  //       }\n  //     }),\n  //   );\n  // }\n\n  const withoutSuperpowers = isEpiphanyAvailable && isAlohomoraAvailable;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timerContainer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.timer}>\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>min</div>\n                  <div>{timer.minutes.toString().padStart(2, \"0\")}</div>\n                </div>\n                .\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>sec</div>\n                  <div>{timer.seconds.toString().padStart(2, \"0\")}</div>\n                </div>\n              </div>\n              {isEasyMode && status === STATUS_IN_PROGRESS ? (\n                <div className={styles.attempts}>\n                  <p>\n                    Осталось <span>{attempts}</span>\n                    {attemptsText}\n                  </p>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS ? (\n          <>\n            <div className={styles.powersContainer}>\n              {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n                <div className={styles.superPowersContainer}>\n                  <PiphanyPower\n                    isAvailable={isEpiphanyAvailable}\n                    // onClick={openTooltipEpiphany}\n                    onMouseEnter={onEpiphanyHover}\n                    onMouseLeave={onEpiphanyMouseLeave}\n                    setIsPiphanyHover={setIsPiphanyHover}\n                    isAlohomoraHover={isAlohomoraHover}\n                    isAlohomoraAvailable={isAlohomoraAvailable}\n                  />\n                  <AlohomoraPower\n                    isAvailable={isAlohomoraAvailable}\n                    // onClick={openTooltipAlohomora}\n                    onMouseEnter={onAlohomoraHover}\n                    onMouseLeave={onAlohomoraMouseLeave}\n                    setIsAlohomoraHover={setIsAlohomoraHover}\n                    isPiphanyHover={isPiphanyHover}\n                    isEpiphanyAvailable={isEpiphanyAvailable}\n                  />\n                </div>\n              ) : null}\n              {(isPiphanyHover && isEpiphanyAvailable) || (isAlohomoraHover && isAlohomoraAvailable) ? (\n                <div className={styles.modalBackground}>\n                  <div className={styles.modalWindow}>\n                    {isPiphanyHover && isEpiphanyAvailable && (\n                      <div className={isAlohomoraAvailable ? styles.toolTipEpiphany : styles.toolTip}>\n                        <ToolTips\n                          title={\"Прозрение\"}\n                          text={\n                            \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                          }\n                        />\n                      </div>\n                    )}\n                    {isAlohomoraHover && isAlohomoraAvailable && (\n                      <div className={isEpiphanyAvailable ? styles.toolTipAlohomora : styles.toolTip}>\n                        <ToolTips title={\"Алохомора\"} text={\"Открывается случайная пара карт.\"} />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ) : null}\n            </div>\n            <Button onClick={resetGame}>Начать заново</Button>\n          </>\n        ) : null}\n      </div>\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n      {isGameEnded ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n            isLeader={isLeader}\n            withoutSuperpowers={withoutSuperpowers}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
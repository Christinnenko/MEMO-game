{"ast":null,"code":"var _jsxFileName = \"/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\n\n// Игра закончилась\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0\n    };\n  }\n  if (endDate === null) {\n    endDate = new Date();\n  }\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Облегченная версия игры: 3 ошибки = поражение.\n */\nexport function Cards({\n  pairsCount = 3,\n  previewSeconds = 5\n}) {\n  _s();\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n\n  // количество ошибок(попыток)\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.setEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 3) {\n      finishGame(STATUS_LOST);\n      dispatch(removeAttempts());\n    }\n  });\n  function finishGame(status = STATUS_LOST) {\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n  }\n  function resetGame() {\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return {\n        ...card,\n        open: true\n      };\n    });\n    setCards(nextCards);\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      if (sameCards.length < 2) {\n        return true;\n      }\n      return false;\n    });\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // \"Игрок проиграл\", т.к на поле есть две открытые карты без пары\n    if (playerLost) {\n      finishGame(STATUS_LOST);\n      return;\n    }\n\n    // // В облегченном уровне: \"Игрок проиграл\", т.к допустил 3 ошибки\n    // if (!isEasyMode) {\n    //   finishGame(STATUS_LOST);\n    //   dispatch(removeAttempts());\n    // } else {\n    //   const updatedCards = nextCards.map(card => {\n    //     if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n    //       if (card.open) {\n    //         setTimeout(() => {\n    //           setCards(prevCards => {\n    //             const updated = prevCards.map(c => (c.id === card.id ? { ...c, open: false } : c));\n    //             return updated;\n    //           });\n    //         }, 1000);\n    //       }\n    //     }\n    //     return card;\n    //   });\n    //   setCards(updatedCards);\n    // }\n\n    if (!isEasyMode) {\n      if (status === STATUS_LOST) {\n        dispatch(updateAttempts());\n        if (attempts >= 3) {\n          setStatus(STATUS_LOST);\n        }\n      } else {\n        dispatch(removeAttempts());\n        setStatus(STATUS_WON);\n      }\n    } else {\n      setStatus(STATUS_LOST);\n    }\n\n    // ... игра продолжается\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timer,\n        children: status === STATUS_PREVIEW ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewText,\n            children: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewDescription,\n            children: [\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \", previewSeconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timerValue,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerDescription,\n              children: \"min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: timer.minutes.toString().padStart(\"2\", \"0\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timerValue,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerDescription,\n              children: \"sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: timer.seconds.toString().padStart(\"2\", \"0\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), status === STATUS_IN_PROGRESS ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: resetGame,\n        children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 42\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => openCard(card),\n        open: status !== STATUS_IN_PROGRESS ? true : card.open,\n        suit: card.suit,\n        rank: card.rank\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), isGameEnded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContainer,\n      children: /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isWon: status === STATUS_WON,\n        gameDurationSeconds: timer.seconds,\n        gameDurationMinutes: timer.minutes,\n        onClick: resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"aAEtCMitgSx52YBBHuF0sFrTH7g=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","updateAttempts","jsxDEV","_jsxDEV","Fragment","_Fragment","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSecconds","Math","floor","getTime","Cards","pairsCount","previewSeconds","_s","dispatch","cards","setCards","status","setStatus","gameStartDate","setGameStartDate","gameEndDate","setGameEndDate","timer","setTimer","attempts","store","game","isEasyMode","setEasyMode","finishGame","startGame","resetGame","openCard","clickedCard","open","nextCards","map","card","id","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","length","playerLost","isGameEnded","alert","timerId","setTimeout","clearTimeout","intervalId","setInterval","clearInterval","className","container","children","header","previewText","fileName","_jsxFileName","lineNumber","columnNumber","previewDescription","timerValue","timerDescription","toString","padStart","onClick","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes","_c","$RefreshReg$"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\n\n// Игра закончилась\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds,\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Облегченная версия игры: 3 ошибки = поражение.\n */\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0,\n  });\n\n  // количество ошибок(попыток)\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.setEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 3) {\n      finishGame(STATUS_LOST);\n      dispatch(removeAttempts());\n    }\n  });\n\n  function finishGame(status = STATUS_LOST) {\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n  }\n  function resetGame() {\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n\n      return {\n        ...card,\n        open: true,\n      };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n\n      if (sameCards.length < 2) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // \"Игрок проиграл\", т.к на поле есть две открытые карты без пары\n    if (playerLost) {\n      finishGame(STATUS_LOST);\n      return;\n    }\n\n    // // В облегченном уровне: \"Игрок проиграл\", т.к допустил 3 ошибки\n    // if (!isEasyMode) {\n    //   finishGame(STATUS_LOST);\n    //   dispatch(removeAttempts());\n    // } else {\n    //   const updatedCards = nextCards.map(card => {\n    //     if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n    //       if (card.open) {\n    //         setTimeout(() => {\n    //           setCards(prevCards => {\n    //             const updated = prevCards.map(c => (c.id === card.id ? { ...c, open: false } : c));\n    //             return updated;\n    //           });\n    //         }, 1000);\n    //       }\n    //     }\n    //     return card;\n    //   });\n    //   setCards(updatedCards);\n    // }\n\n    if (!isEasyMode) {\n      if (status === STATUS_LOST) {\n        dispatch(updateAttempts());\n        if (attempts >= 3) {\n          setStatus(STATUS_LOST);\n        }\n      } else {\n        dispatch(removeAttempts());\n        setStatus(STATUS_WON);\n      }\n    } else {\n      setStatus(STATUS_LOST);\n    }\n\n    // ... игра продолжается\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.timerValue}>\n                <div className={styles.timerDescription}>min</div>\n                <div>{timer.minutes.toString().padStart(\"2\", \"0\")}</div>\n              </div>\n              .\n              <div className={styles.timerValue}>\n                <div className={styles.timerDescription}>sec</div>\n                <div>{timer.seconds.toString().padStart(\"2\", \"0\")}</div>\n              </div>\n            </>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS ? <Button onClick={resetGame}>Начать заново</Button> : null}\n      </div>\n\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n\n      {isGameEnded ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
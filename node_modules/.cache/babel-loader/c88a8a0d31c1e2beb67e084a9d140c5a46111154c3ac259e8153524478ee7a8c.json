{"ast":null,"code":"var _jsxFileName = \"/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts } from \"../../store/slices\";\n\n// Игра закончилась\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0\n    };\n  }\n  if (endDate === null) {\n    endDate = new Date();\n  }\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Облегченная версия игры: 3 ошибки = поражение.\n */\nexport function Cards({\n  pairsCount = 3,\n  previewSeconds = 5\n}) {\n  _s();\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n\n  // количество ошибок(попыток)\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 3) {\n      finishGame(STATUS_LOST);\n      dispatch(removeAttempts());\n    }\n  });\n  function finishGame(status = STATUS_LOST) {\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n  }\n  function resetGame() {\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return {\n        ...card,\n        open: true\n      };\n    });\n    setCards(nextCards);\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      if (sameCards.length < 2) {\n        return true;\n      }\n      return false;\n    });\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // \"Игрок проиграл\", т.к на поле есть две открытые карты без пары\n    if (playerLost) {\n      finishGame(STATUS_LOST);\n      return;\n    }\n\n    // ... игра продолжается\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerContainer,\n        children: status === STATUS_PREVIEW ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewText,\n            children: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewDescription,\n            children: [\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \", previewSeconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.timer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timerValue,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerDescription,\n              children: \"min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: timer.minutes.toString().padStart(\"2\", \"0\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timerValue,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerDescription,\n              children: \"sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: timer.seconds.toString().padStart(\"2\", \"0\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), isEasyMode && status === STATUS_IN_PROGRESS ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 30\n              }, this), \" \\u043F\\u043E\\u043F\\u044B\\u0442\\u043A\\u0438\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), status === STATUS_IN_PROGRESS ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: resetGame,\n        children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 42\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => openCard(card),\n        open: status !== STATUS_IN_PROGRESS ? true : card.open,\n        suit: card.suit,\n        rank: card.rank\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), isGameEnded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContainer,\n      children: /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isWon: status === STATUS_WON,\n        gameDurationSeconds: timer.seconds,\n        gameDurationMinutes: timer.minutes,\n        onClick: resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"aAEtCMitgSx52YBBHuF0sFrTH7g=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","jsxDEV","_jsxDEV","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSecconds","Math","floor","getTime","Cards","pairsCount","previewSeconds","_s","dispatch","cards","setCards","status","setStatus","gameStartDate","setGameStartDate","gameEndDate","setGameEndDate","timer","setTimer","attempts","store","game","isEasyMode","finishGame","startGame","resetGame","openCard","clickedCard","open","nextCards","map","card","id","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","length","playerLost","isGameEnded","alert","timerId","setTimeout","clearTimeout","intervalId","setInterval","clearInterval","className","container","children","header","timerContainer","previewText","fileName","_jsxFileName","lineNumber","columnNumber","previewDescription","timerValue","timerDescription","toString","padStart","onClick","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes","_c","$RefreshReg$"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts } from \"../../store/slices\";\n\n// Игра закончилась\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\n// Идет игра: карты закрыты, игрок может их открыть\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\n// Начало игры: игрок видит все карты в течении нескольких секунд\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSecconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSecconds / 60);\n  const seconds = diffInSecconds % 60;\n  return {\n    minutes,\n    seconds,\n  };\n}\n\n/**\n * Основной компонент игры, внутри него находится вся игровая механика и логика.\n * pairsCount - сколько пар будет в игре\n * previewSeconds - сколько секунд пользователь будет видеть все карты открытыми до начала игры\n * Облегченная версия игры: 3 ошибки = поражение.\n */\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n\n  // В cards лежит игровое поле - массив карт и их состояние открыта\\закрыта\n  const [cards, setCards] = useState([]);\n  // Текущий статус игры\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n\n  // Дата начала игры\n  const [gameStartDate, setGameStartDate] = useState(null);\n  // Дата конца игры\n  const [gameEndDate, setGameEndDate] = useState(null);\n\n  // Стейт для таймера, высчитывается в setInteval на основе gameStartDate и gameEndDate\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0,\n  });\n\n  // количество ошибок(попыток)\n  const attempts = useSelector(store => store.game.attempts);\n\n  // Статус режима игры до трех ошибок\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n\n  // Если допущено 3 ошибки, игра заканчивается\n  useEffect(() => {\n    if (attempts === 3) {\n      finishGame(STATUS_LOST);\n      dispatch(removeAttempts());\n    }\n  });\n\n  function finishGame(status = STATUS_LOST) {\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n  }\n  function resetGame() {\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  /**\n   * Обработка основного действия в игре - открытие карты.\n   * После открытия карты игра может переходить в следующие состояния\n   * - \"Игрок выиграл\", если на поле открыты все карты\n   * - \"Игрок проиграл\", если на поле есть две открытые карты без пары\n   * - \"Игра продолжается\", если не случилось первых двух условий\n   */\n  const openCard = clickedCard => {\n    // Если карта уже открыта, то ничего не делаем\n    if (clickedCard.open) {\n      return;\n    }\n    // Игровое поле после открытия кликнутой карты\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n\n      return {\n        ...card,\n        open: true,\n      };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    // Победа - все карты на поле открыты\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    // Открытые карты на игровом поле\n    const openCards = nextCards.filter(card => card.open);\n\n    // Ищем открытые карты, у которых нет пары среди других открытых\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n\n      if (sameCards.length < 2) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    // \"Игрок проиграл\", т.к на поле есть две открытые карты без пары\n    if (playerLost) {\n      finishGame(STATUS_LOST);\n      return;\n    }\n\n    // ... игра продолжается\n  };\n\n  const isGameEnded = status === STATUS_LOST || status === STATUS_WON;\n\n  // Игровой цикл\n  useEffect(() => {\n    // В статусах кроме превью доп логики не требуется\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    // В статусе превью мы\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  // Обновляем значение таймера в интервале\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(getTimerValue(gameStartDate, gameEndDate));\n    }, 300);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timerContainer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <div className={styles.timer}>\n              <div className={styles.timerValue}>\n                <div className={styles.timerDescription}>min</div>\n                <div>{timer.minutes.toString().padStart(\"2\", \"0\")}</div>\n              </div>\n              .\n              <div className={styles.timerValue}>\n                <div className={styles.timerDescription}>sec</div>\n                <div>{timer.seconds.toString().padStart(\"2\", \"0\")}</div>\n              </div>\n              {isEasyMode && status === STATUS_IN_PROGRESS ? (\n                <div>\n                  <p>\n                    Осталось <span>3</span> попытки\n                  </p>\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS ? <Button onClick={resetGame}>Начать заново</Button> : null}\n      </div>\n\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n\n      {isGameEnded ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
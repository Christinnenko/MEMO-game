{"ast":null,"code":"// Модуль для изменения окончания слов\n\n// Задаем формы для слов \"попытка\" и \"пользователь\"\nexport const attemptForms = [\"попытка\", \"попытки\", \"попыток\"];\nexport const wordEndingChanger = function () {\n  // Вспомогательная функция для определения окончания в зависимости от числа\n  function getEnding(number, endings) {\n    // Приводим число к положительному значению\n    number = Math.abs(number);\n\n    // Исключаем числа от 11 до 19, так как для них окончание всегда будет \"-ок\"/\n    number %= 100;\n    if (number >= 11 && number <= 19) {\n      return endings[2];\n    }\n\n    // Определяем последнюю цифру числа\n    const lastDigit = number % 10;\n\n    // В зависимости от последней цифры определяем окончание\n    switch (lastDigit) {\n      case 1:\n        return endings[0];\n      case 2:\n      case 3:\n      case 4:\n        return endings[1];\n      default:\n        return endings[2];\n    }\n  }\n\n  // Основная функция для изменения окончания слова\n  function changeEnding(number, wordForms) {\n    // Получаем окончание с использованием вспомогательной функции\n    const ending = getEnding(number, wordForms);\n    // Формируем строку с окончанием и пробелом перед словом\n    return \" \" + ending;\n  }\n\n  // Экспортируемая часть модуля\n  return {\n    changeEnding: changeEnding\n  };\n}();\n\n// Функция для преобразования секунд в формат чч:мм\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedHours = hours.toString().padStart(2, \"0\");\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\n  const formattedSeconds = remainingSeconds.toString().padStart(2, \"0\");\n  if (hours > 0) {\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  } else if (minutes > 0) {\n    return `${formattedMinutes}:${formattedSeconds}`;\n  } else {\n    return `00:${formattedSeconds}`;\n  }\n}","map":{"version":3,"names":["attemptForms","wordEndingChanger","getEnding","number","endings","Math","abs","lastDigit","changeEnding","wordForms","ending","formatTime","seconds","hours","floor","minutes","remainingSeconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/helpers.js"],"sourcesContent":["// Модуль для изменения окончания слов\n\n// Задаем формы для слов \"попытка\" и \"пользователь\"\nexport const attemptForms = [\"попытка\", \"попытки\", \"попыток\"];\n\nexport const wordEndingChanger = (function () {\n  // Вспомогательная функция для определения окончания в зависимости от числа\n  function getEnding(number, endings) {\n    // Приводим число к положительному значению\n    number = Math.abs(number);\n\n    // Исключаем числа от 11 до 19, так как для них окончание всегда будет \"-ок\"/\n    number %= 100;\n    if (number >= 11 && number <= 19) {\n      return endings[2];\n    }\n\n    // Определяем последнюю цифру числа\n    const lastDigit = number % 10;\n\n    // В зависимости от последней цифры определяем окончание\n    switch (lastDigit) {\n      case 1:\n        return endings[0];\n      case 2:\n      case 3:\n      case 4:\n        return endings[1];\n      default:\n        return endings[2];\n    }\n  }\n\n  // Основная функция для изменения окончания слова\n  function changeEnding(number, wordForms) {\n    // Получаем окончание с использованием вспомогательной функции\n    const ending = getEnding(number, wordForms);\n    // Формируем строку с окончанием и пробелом перед словом\n    return \" \" + ending;\n  }\n\n  // Экспортируемая часть модуля\n  return {\n    changeEnding: changeEnding,\n  };\n})();\n\n// Функция для преобразования секунд в формат чч:мм\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n\n  const formattedHours = hours.toString().padStart(2, \"0\");\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\n  const formattedSeconds = remainingSeconds.toString().padStart(2, \"0\");\n\n  if (hours > 0) {\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  } else if (minutes > 0) {\n    return `${formattedMinutes}:${formattedSeconds}`;\n  } else {\n    return `00:${formattedSeconds}`;\n  }\n}\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;AAE7D,OAAO,MAAMC,iBAAiB,GAAI,YAAY;EAC5C;EACA,SAASC,SAASA,CAACC,MAAM,EAAEC,OAAO,EAAE;IAClC;IACAD,MAAM,GAAGE,IAAI,CAACC,GAAG,CAACH,MAAM,CAAC;;IAEzB;IACAA,MAAM,IAAI,GAAG;IACb,IAAIA,MAAM,IAAI,EAAE,IAAIA,MAAM,IAAI,EAAE,EAAE;MAChC,OAAOC,OAAO,CAAC,CAAC,CAAC;IACnB;;IAEA;IACA,MAAMG,SAAS,GAAGJ,MAAM,GAAG,EAAE;;IAE7B;IACA,QAAQI,SAAS;MACf,KAAK,CAAC;QACJ,OAAOH,OAAO,CAAC,CAAC,CAAC;MACnB,KAAK,CAAC;MACN,KAAK,CAAC;MACN,KAAK,CAAC;QACJ,OAAOA,OAAO,CAAC,CAAC,CAAC;MACnB;QACE,OAAOA,OAAO,CAAC,CAAC,CAAC;IACrB;EACF;;EAEA;EACA,SAASI,YAAYA,CAACL,MAAM,EAAEM,SAAS,EAAE;IACvC;IACA,MAAMC,MAAM,GAAGR,SAAS,CAACC,MAAM,EAAEM,SAAS,CAAC;IAC3C;IACA,OAAO,GAAG,GAAGC,MAAM;EACrB;;EAEA;EACA,OAAO;IACLF,YAAY,EAAEA;EAChB,CAAC;AACH,CAAC,CAAE,CAAC;;AAEJ;AACA,OAAO,SAASG,UAAUA,CAACC,OAAO,EAAE;EAClC,MAAMC,KAAK,GAAGR,IAAI,CAACS,KAAK,CAACF,OAAO,GAAG,IAAI,CAAC;EACxC,MAAMG,OAAO,GAAGV,IAAI,CAACS,KAAK,CAAEF,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;EACjD,MAAMI,gBAAgB,GAAGJ,OAAO,GAAG,EAAE;EAErC,MAAMK,cAAc,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACxD,MAAMC,gBAAgB,GAAGL,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC5D,MAAME,gBAAgB,GAAGL,gBAAgB,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAErE,IAAIN,KAAK,GAAG,CAAC,EAAE;IACb,OAAQ,GAAEI,cAAe,IAAGG,gBAAiB,IAAGC,gBAAiB,EAAC;EACpE,CAAC,MAAM,IAAIN,OAAO,GAAG,CAAC,EAAE;IACtB,OAAQ,GAAEK,gBAAiB,IAAGC,gBAAiB,EAAC;EAClD,CAAC,MAAM;IACL,OAAQ,MAAKA,gBAAiB,EAAC;EACjC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return {\n      minutes: 0,\n      seconds: 0\n    };\n  }\n  if (endDate === null) {\n    endDate = new Date();\n  }\n  const diffInSeconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSeconds / 60);\n  const seconds = diffInSeconds % 60;\n  return {\n    minutes,\n    seconds\n  };\n}\nexport function Cards({\n  pairsCount = 3,\n  previewSeconds = 5\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const [cards, setCards] = useState([]);\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n  const [gameStartDate, setGameStartDate] = useState(null);\n  const [gameEndDate, setGameEndDate] = useState(null);\n  const [timer, setTimer] = useState({\n    seconds: 0,\n    minutes: 0\n  });\n  const attempts = useSelector(store => store.game.attempts);\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n  const [isPiphanyUsed, setIsPiphanyUsed] = useState(false);\n  const [isPiphanyAvailable, setIsPiphanyAvailable] = useState(true);\n  const [intervalId, setIntervalId] = useState(null); // Добавленное состояние\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false); // Добавленное состояние\n\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore().then(data => {\n        const leaders = data.leaders;\n        const timeLastLeaders = leaders.reduce((maxTime, leader) => Math.max(maxTime, leader.time), 0);\n        const {\n          minutes,\n          seconds\n        } = timer;\n        const userTime = minutes * 60 + seconds;\n        if (timeLastLeaders > userTime || leaders.length < 10) {\n          setIsLeader(true);\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }, [status, currentLevel]);\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  }, [attempts]);\n  useEffect(() => {\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (!isPiphanyUsed) {\n        setTimer(getTimerValue(gameStartDate, gameEndDate));\n      }\n    }, 300);\n    setIntervalId(id); // Сохраняем id интервала\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate, isPiphanyUsed, intervalId]);\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsPiphanyAvailable(true);\n  }\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n  const openCard = clickedCard => {\n    if (clickedCard.open) {\n      return;\n    }\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return {\n        ...card,\n        open: true\n      };\n    });\n    setCards(nextCards);\n    const isPlayerWon = nextCards.every(card => card.open);\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n    const openCards = nextCards.filter(card => card.open);\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      return sameCards.length < 2;\n    });\n    const playerLost = openCardsWithoutPair.length >= 2;\n    if (playerLost) {\n      dispatch(updateAttempts());\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(prevCard => prevCard.id === card.id ? {\n                    ...prevCard,\n                    open: false\n                  } : prevCard);\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n  function usePiphany() {\n    clearInterval(intervalId);\n    setIsPiphanyUsed(true);\n    setIsPiphanyAvailable(false);\n    const closedCards = cards.filter(card => !card.open);\n    const nextCards = cards.map(card => closedCards.includes(card) ? {\n      ...card,\n      open: true\n    } : card);\n    setCards(nextCards);\n    setTimeout(() => {\n      setStatus(STATUS_IN_PROGRESS);\n    }, 5000);\n  }\n  const withoutSuperpowers = isPiphanyAvailable;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.timerContainer,\n        children: status === STATUS_PREVIEW ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewText,\n            children: \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u0438\\u043D\\u0430\\u0439\\u0442\\u0435 \\u043F\\u0430\\u0440\\u044B!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.previewDescription,\n            children: [\"\\u0418\\u0433\\u0440\\u0430 \\u043D\\u0430\\u0447\\u043D\\u0435\\u0442\\u0441\\u044F \\u0447\\u0435\\u0440\\u0435\\u0437 \", previewSeconds, \" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.timer,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.minutes.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.timerValue,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.timerDescription,\n                children: \"sec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timer.seconds.toString().padStart(2, \"0\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), isEasyMode && (status === STATUS_IN_PROGRESS || status === STATUS_PAUSED) ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.attempts,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: attempts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 30\n              }, this), \" \", wordEndingChanger.changeEnding(attempts, attemptForms)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.powersContainer,\n          children: status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PiphanyPower, {\n              isAvailable: isPiphanyAvailable,\n              onClick: usePiphany,\n              onMouseEnter: () => setIsPiphanyHover(true) // Обновляем состояние ховера\n              ,\n              onMouseLeave: () => setIsPiphanyHover(false) // Обновляем состояние ховера\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(AlohomoraPower, {\n              isAvailable: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 19\n            }, this), isPiphanyHover && isPiphanyAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.toolTipPiphany,\n              children: /*#__PURE__*/_jsxDEV(ToolTips, {\n                title: \"Прозрение\",\n                text: \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: resetGame,\n          children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cards,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => openCard(card),\n        open: status !== STATUS_IN_PROGRESS ? true : card.open,\n        suit: card.suit,\n        rank: card.rank\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), status === STATUS_WON || status === STATUS_LOST ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalContainer,\n      children: /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isWon: status === STATUS_WON,\n        gameDurationSeconds: timer.seconds,\n        gameDurationMinutes: timer.minutes,\n        onClick: resetGame,\n        isLeader: isLeader,\n        withoutSuperpowers: withoutSuperpowers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"DPY9L9A4yAFLxDPI2UYs+ugrFYU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["shuffle","useEffect","useState","generateDeck","styles","EndGameModal","Button","Card","useDispatch","useSelector","removeAttempts","updateAttempts","attemptForms","wordEndingChanger","getAllScore","AlohomoraPower","PiphanyPower","ToolTips","jsxDEV","_jsxDEV","Fragment","_Fragment","STATUS_LOST","STATUS_WON","STATUS_IN_PROGRESS","STATUS_PREVIEW","STATUS_PAUSED","getTimerValue","startDate","endDate","minutes","seconds","Date","diffInSeconds","Math","floor","getTime","Cards","pairsCount","previewSeconds","_s","dispatch","cards","setCards","status","setStatus","gameStartDate","setGameStartDate","gameEndDate","setGameEndDate","timer","setTimer","attempts","store","game","isEasyMode","isLeader","setIsLeader","currentLevel","isPiphanyUsed","setIsPiphanyUsed","isPiphanyAvailable","setIsPiphanyAvailable","intervalId","setIntervalId","isPiphanyHover","setIsPiphanyHover","then","data","leaders","timeLastLeaders","reduce","maxTime","leader","max","time","userTime","length","catch","error","console","finishGame","alert","timerId","setTimeout","startGame","clearTimeout","id","setInterval","clearInterval","resetGame","openCard","clickedCard","open","nextCards","map","card","isPlayerWon","every","openCards","filter","openCardsWithoutPair","sameCards","suit","rank","playerLost","updatedCards","some","prevCards","updated","prevCard","usePiphany","closedCards","includes","withoutSuperpowers","className","container","children","header","timerContainer","previewText","fileName","_jsxFileName","lineNumber","columnNumber","previewDescription","timerValue","timerDescription","toString","padStart","changeEnding","buttonContainer","powersContainer","isAvailable","onClick","onMouseEnter","onMouseLeave","toolTipPiphany","title","text","modalContainer","isWon","gameDurationSeconds","gameDurationMinutes","_c","$RefreshReg$"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/components/Cards/Cards.jsx"],"sourcesContent":["import { shuffle } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { generateDeck } from \"../../utils/cards\";\nimport styles from \"./Cards.module.css\";\nimport { EndGameModal } from \"../../components/EndGameModal/EndGameModal\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Card } from \"../../components/Card/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeAttempts, updateAttempts } from \"../../store/slices\";\nimport { attemptForms, wordEndingChanger } from \"../../helpers\";\nimport { getAllScore } from \"../../api\";\nimport { AlohomoraPower } from \"../Superpowers/AlohomoraPower\";\nimport { PiphanyPower } from \"../Superpowers/PiphanyPower\";\nimport { ToolTips } from \"../../utils/tooltips/tooltip\";\n\nconst STATUS_LOST = \"STATUS_LOST\";\nconst STATUS_WON = \"STATUS_WON\";\nconst STATUS_IN_PROGRESS = \"STATUS_IN_PROGRESS\";\nconst STATUS_PREVIEW = \"STATUS_PREVIEW\";\nconst STATUS_PAUSED = \"STATUS_PAUSED\";\n\nfunction getTimerValue(startDate, endDate) {\n  if (!startDate && !endDate) {\n    return { minutes: 0, seconds: 0 };\n  }\n\n  if (endDate === null) {\n    endDate = new Date();\n  }\n\n  const diffInSeconds = Math.floor((endDate.getTime() - startDate.getTime()) / 1000);\n  const minutes = Math.floor(diffInSeconds / 60);\n  const seconds = diffInSeconds % 60;\n  return { minutes, seconds };\n}\n\nexport function Cards({ pairsCount = 3, previewSeconds = 5 }) {\n  const dispatch = useDispatch();\n  const [cards, setCards] = useState([]);\n  const [status, setStatus] = useState(STATUS_PREVIEW);\n  const [gameStartDate, setGameStartDate] = useState(null);\n  const [gameEndDate, setGameEndDate] = useState(null);\n  const [timer, setTimer] = useState({ seconds: 0, minutes: 0 });\n  const attempts = useSelector(store => store.game.attempts);\n  const isEasyMode = useSelector(store => store.game.isEasyMode);\n  const [isLeader, setIsLeader] = useState(false);\n  const currentLevel = useSelector(store => store.game.currentLevel);\n  const [isPiphanyUsed, setIsPiphanyUsed] = useState(false);\n  const [isPiphanyAvailable, setIsPiphanyAvailable] = useState(true);\n  const [intervalId, setIntervalId] = useState(null); // Добавленное состояние\n  const [isPiphanyHover, setIsPiphanyHover] = useState(false); // Добавленное состояние\n\n  useEffect(() => {\n    if (status === STATUS_WON && currentLevel === 3) {\n      getAllScore()\n        .then(data => {\n          const leaders = data.leaders;\n          const timeLastLeaders = leaders.reduce((maxTime, leader) => Math.max(maxTime, leader.time), 0);\n          const { minutes, seconds } = timer;\n          const userTime = minutes * 60 + seconds;\n          if (timeLastLeaders > userTime || leaders.length < 10) {\n            setIsLeader(true);\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }, [status, currentLevel]);\n\n  useEffect(() => {\n    if (attempts === 0) {\n      finishGame(STATUS_LOST);\n    }\n  }, [attempts]);\n\n  useEffect(() => {\n    if (status !== STATUS_PREVIEW) {\n      return;\n    }\n\n    if (pairsCount > 36) {\n      alert(\"Столько пар сделать невозможно\");\n      return;\n    }\n\n    setCards(() => {\n      return shuffle(generateDeck(pairsCount, 10));\n    });\n\n    const timerId = setTimeout(() => {\n      startGame();\n    }, previewSeconds * 1000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status, pairsCount, previewSeconds]);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (!isPiphanyUsed) {\n        setTimer(getTimerValue(gameStartDate, gameEndDate));\n      }\n    }, 300);\n    setIntervalId(id); // Сохраняем id интервала\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStartDate, gameEndDate, isPiphanyUsed, intervalId]);\n\n  function finishGame(status = STATUS_LOST) {\n    dispatch(removeAttempts());\n    setGameEndDate(new Date());\n    setStatus(status);\n  }\n\n  function startGame() {\n    const startDate = new Date();\n    setGameEndDate(null);\n    setGameStartDate(startDate);\n    setTimer(getTimerValue(startDate, null));\n    setStatus(STATUS_IN_PROGRESS);\n    setIsPiphanyAvailable(true);\n  }\n\n  function resetGame() {\n    dispatch(removeAttempts());\n    setGameStartDate(null);\n    setGameEndDate(null);\n    setTimer(getTimerValue(null, null));\n    setStatus(STATUS_PREVIEW);\n  }\n\n  const openCard = clickedCard => {\n    if (clickedCard.open) {\n      return;\n    }\n\n    const nextCards = cards.map(card => {\n      if (card.id !== clickedCard.id) {\n        return card;\n      }\n      return { ...card, open: true };\n    });\n\n    setCards(nextCards);\n\n    const isPlayerWon = nextCards.every(card => card.open);\n\n    if (isPlayerWon) {\n      finishGame(STATUS_WON);\n      return;\n    }\n\n    const openCards = nextCards.filter(card => card.open);\n    const openCardsWithoutPair = openCards.filter(card => {\n      const sameCards = openCards.filter(openCard => card.suit === openCard.suit && card.rank === openCard.rank);\n      return sameCards.length < 2;\n    });\n\n    const playerLost = openCardsWithoutPair.length >= 2;\n\n    if (playerLost) {\n      dispatch(updateAttempts());\n      if (!isEasyMode) {\n        finishGame(STATUS_LOST);\n      } else {\n        const updatedCards = nextCards.map(card => {\n          if (openCardsWithoutPair.some(openCard => openCard.id === card.id)) {\n            if (card.open) {\n              setTimeout(() => {\n                setCards(prevCards => {\n                  const updated = prevCards.map(prevCard =>\n                    prevCard.id === card.id ? { ...prevCard, open: false } : prevCard,\n                  );\n                  return updated;\n                });\n              }, 1000);\n            }\n          }\n          return card;\n        });\n        setCards(updatedCards);\n      }\n      return;\n    }\n  };\n\n  function usePiphany() {\n    clearInterval(intervalId);\n    setIsPiphanyUsed(true);\n    setIsPiphanyAvailable(false);\n\n    const closedCards = cards.filter(card => !card.open);\n    const nextCards = cards.map(card => (closedCards.includes(card) ? { ...card, open: true } : card));\n\n    setCards(nextCards);\n\n    setTimeout(() => {\n      setStatus(STATUS_IN_PROGRESS);\n    }, 5000);\n  }\n\n  const withoutSuperpowers = isPiphanyAvailable;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <div className={styles.timerContainer}>\n          {status === STATUS_PREVIEW ? (\n            <div>\n              <p className={styles.previewText}>Запоминайте пары!</p>\n              <p className={styles.previewDescription}>Игра начнется через {previewSeconds} секунд</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.timer}>\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>min</div>\n                  <div>{timer.minutes.toString().padStart(2, \"0\")}</div>\n                </div>\n                .\n                <div className={styles.timerValue}>\n                  <div className={styles.timerDescription}>sec</div>\n                  <div>{timer.seconds.toString().padStart(2, \"0\")}</div>\n                </div>\n              </div>\n              {isEasyMode && (status === STATUS_IN_PROGRESS || status === STATUS_PAUSED) ? (\n                <div className={styles.attempts}>\n                  <p>\n                    Осталось <span>{attempts}</span> {wordEndingChanger.changeEnding(attempts, attemptForms)}\n                  </p>\n                </div>\n              ) : null}\n            </>\n          )}\n        </div>\n        {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n          <div className={styles.buttonContainer}>\n            <div className={styles.powersContainer}>\n              {status === STATUS_IN_PROGRESS || status === STATUS_PAUSED ? (\n                <>\n                  <PiphanyPower\n                    isAvailable={isPiphanyAvailable}\n                    onClick={usePiphany}\n                    onMouseEnter={() => setIsPiphanyHover(true)} // Обновляем состояние ховера\n                    onMouseLeave={() => setIsPiphanyHover(false)} // Обновляем состояние ховера\n                  />\n                  <AlohomoraPower isAvailable={true} />\n                  {isPiphanyHover && isPiphanyAvailable && (\n                    <div className={styles.toolTipPiphany}>\n                      <ToolTips\n                        title={\"Прозрение\"}\n                        text={\n                          \"На 5 секунд показываются все карты. Таймер длительности игры на это время останавливается.\"\n                        }\n                      />\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </div>\n            <Button onClick={resetGame}>Начать заново</Button>\n          </div>\n        ) : null}\n      </div>\n      <div className={styles.cards}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            onClick={() => openCard(card)}\n            open={status !== STATUS_IN_PROGRESS ? true : card.open}\n            suit={card.suit}\n            rank={card.rank}\n          />\n        ))}\n      </div>\n      {status === STATUS_WON || status === STATUS_LOST ? (\n        <div className={styles.modalContainer}>\n          <EndGameModal\n            isWon={status === STATUS_WON}\n            gameDurationSeconds={timer.seconds}\n            gameDurationMinutes={timer.minutes}\n            onClick={resetGame}\n            isLeader={isLeader}\n            withoutSuperpowers={withoutSuperpowers}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
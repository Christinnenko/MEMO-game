{"ast":null,"code":"// Модуль для изменения окончания слов\nexport var attemptForms=[\"попытка\",\"попытки\",\"попыток\"];export var wordEndingChanger=function(){// Вспомогательная функция для определения окончания в зависимости от числа\nfunction getEnding(number,endings){// Приводим число к положительному значению\nnumber=Math.abs(number);// Исключаем числа от 11 до 19, так как для них окончание всегда будет \"-ок\"/\nnumber%=100;if(number>=11&&number<=19){return endings[2];}// Определяем последнюю цифру числа\nvar lastDigit=number%10;// В зависимости от последней цифры определяем окончание\nswitch(lastDigit){case 1:return endings[0];case 2:case 3:case 4:return endings[1];default:return endings[2];}}// Основная функция для изменения окончания слова\nfunction changeEnding(number,wordForms){// Получаем окончание с использованием вспомогательной функции\nvar ending=getEnding(number,wordForms);// Формируем строку с окончанием и пробелом перед словом\nreturn\" \"+ending;}// Экспортируемая часть модуля\nreturn{changeEnding:changeEnding};}();// Функция для преобразования секунд в формат чч:мм\nexport function formatTime(seconds){var hours=Math.floor(seconds/3600);var minutes=Math.floor(seconds%3600/60);var remainingSeconds=seconds%60;var formattedHours=hours.toString().padStart(2,\"0\");var formattedMinutes=minutes.toString().padStart(2,\"0\");var formattedSeconds=remainingSeconds.toString().padStart(2,\"0\");if(hours>0){return\"\".concat(formattedHours,\":\").concat(formattedMinutes,\":\").concat(formattedSeconds);}else if(minutes>0){return\"\".concat(formattedMinutes,\":\").concat(formattedSeconds);}else{return\"00:\".concat(formattedSeconds);}}","map":{"version":3,"names":["attemptForms","wordEndingChanger","getEnding","number","endings","Math","abs","lastDigit","changeEnding","wordForms","ending","formatTime","seconds","hours","floor","minutes","remainingSeconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","concat"],"sources":["/Users/christinnenko/Documents/skyPro-git/react-memo-game/src/helpers.js"],"sourcesContent":["// Модуль для изменения окончания слов\n\nexport const attemptForms = [\"попытка\", \"попытки\", \"попыток\"];\n\nexport const wordEndingChanger = (function () {\n  // Вспомогательная функция для определения окончания в зависимости от числа\n  function getEnding(number, endings) {\n    // Приводим число к положительному значению\n    number = Math.abs(number);\n\n    // Исключаем числа от 11 до 19, так как для них окончание всегда будет \"-ок\"/\n    number %= 100;\n    if (number >= 11 && number <= 19) {\n      return endings[2];\n    }\n\n    // Определяем последнюю цифру числа\n    const lastDigit = number % 10;\n\n    // В зависимости от последней цифры определяем окончание\n    switch (lastDigit) {\n      case 1:\n        return endings[0];\n      case 2:\n      case 3:\n      case 4:\n        return endings[1];\n      default:\n        return endings[2];\n    }\n  }\n\n  // Основная функция для изменения окончания слова\n  function changeEnding(number, wordForms) {\n    // Получаем окончание с использованием вспомогательной функции\n    const ending = getEnding(number, wordForms);\n    // Формируем строку с окончанием и пробелом перед словом\n    return \" \" + ending;\n  }\n\n  // Экспортируемая часть модуля\n  return {\n    changeEnding: changeEnding,\n  };\n})();\n\n// Функция для преобразования секунд в формат чч:мм\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n\n  const formattedHours = hours.toString().padStart(2, \"0\");\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\n  const formattedSeconds = remainingSeconds.toString().padStart(2, \"0\");\n\n  if (hours > 0) {\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n  } else if (minutes > 0) {\n    return `${formattedMinutes}:${formattedSeconds}`;\n  } else {\n    return `00:${formattedSeconds}`;\n  }\n}\n"],"mappings":"AAAA;AAEA,MAAO,IAAM,CAAAA,YAAY,CAAG,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAE7D,MAAO,IAAM,CAAAC,iBAAiB,CAAI,UAAY,CAC5C;AACA,QAAS,CAAAC,SAASA,CAACC,MAAM,CAAEC,OAAO,CAAE,CAClC;AACAD,MAAM,CAAGE,IAAI,CAACC,GAAG,CAACH,MAAM,CAAC,CAEzB;AACAA,MAAM,EAAI,GAAG,CACb,GAAIA,MAAM,EAAI,EAAE,EAAIA,MAAM,EAAI,EAAE,CAAE,CAChC,MAAO,CAAAC,OAAO,CAAC,CAAC,CAAC,CACnB,CAEA;AACA,GAAM,CAAAG,SAAS,CAAGJ,MAAM,CAAG,EAAE,CAE7B;AACA,OAAQI,SAAS,EACf,IAAK,EAAC,CACJ,MAAO,CAAAH,OAAO,CAAC,CAAC,CAAC,CACnB,IAAK,EAAC,CACN,IAAK,EAAC,CACN,IAAK,EAAC,CACJ,MAAO,CAAAA,OAAO,CAAC,CAAC,CAAC,CACnB,QACE,MAAO,CAAAA,OAAO,CAAC,CAAC,CAAC,CACrB,CACF,CAEA;AACA,QAAS,CAAAI,YAAYA,CAACL,MAAM,CAAEM,SAAS,CAAE,CACvC;AACA,GAAM,CAAAC,MAAM,CAAGR,SAAS,CAACC,MAAM,CAAEM,SAAS,CAAC,CAC3C;AACA,MAAO,GAAG,CAAGC,MAAM,CACrB,CAEA;AACA,MAAO,CACLF,YAAY,CAAEA,YAChB,CAAC,CACH,CAAC,CAAE,CAAC,CAEJ;AACA,MAAO,SAAS,CAAAG,UAAUA,CAACC,OAAO,CAAE,CAClC,GAAM,CAAAC,KAAK,CAAGR,IAAI,CAACS,KAAK,CAACF,OAAO,CAAG,IAAI,CAAC,CACxC,GAAM,CAAAG,OAAO,CAAGV,IAAI,CAACS,KAAK,CAAEF,OAAO,CAAG,IAAI,CAAI,EAAE,CAAC,CACjD,GAAM,CAAAI,gBAAgB,CAAGJ,OAAO,CAAG,EAAE,CAErC,GAAM,CAAAK,cAAc,CAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CACxD,GAAM,CAAAC,gBAAgB,CAAGL,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC5D,GAAM,CAAAE,gBAAgB,CAAGL,gBAAgB,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAErE,GAAIN,KAAK,CAAG,CAAC,CAAE,CACb,SAAAS,MAAA,CAAUL,cAAc,MAAAK,MAAA,CAAIF,gBAAgB,MAAAE,MAAA,CAAID,gBAAgB,EAClE,CAAC,IAAM,IAAIN,OAAO,CAAG,CAAC,CAAE,CACtB,SAAAO,MAAA,CAAUF,gBAAgB,MAAAE,MAAA,CAAID,gBAAgB,EAChD,CAAC,IAAM,CACL,YAAAC,MAAA,CAAaD,gBAAgB,EAC/B,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}